use crate::ascii_mapping::{AsciiConfig, Charset};
use std::error::Error;
use std::fs::File;
use std::io::Write;

pub trait AsciiArtOutputFormat {
    fn write_to(&self, writer: &mut File, ascii_art: &str, config: &AsciiConfig) -> Result<(), Box<dyn Error>>;
    fn file_extension(&self) -> &str;
}

pub struct TxtFormat;

impl AsciiArtOutputFormat for TxtFormat {
    fn write_to(&self, writer: &mut File, ascii_art: &str, ascii_config: &AsciiConfig) -> Result<(), Box<dyn Error>> {
        writer.write_all(ascii_art.as_bytes())?;

        let charset_str = if ascii_config.charset == Charset::CUSTOM {
            &ascii_config.custom_charset
        } else {
            ascii_config.charset.as_str()
        };

        writeln!(writer, "\n{}", "-".repeat(50))?;
        writeln!(writer, "Generated by ASCII Art Generator v{}", env!("CARGO_PKG_VERSION"))?;
        writeln!(writer, "Charset: {}, Enable Color: {}, Invert Output: {}", charset_str, ascii_config.color, ascii_config.invert)?;
        
        Ok(())
    }

    fn file_extension(&self) -> &str {
        "txt"
    }
}

pub struct OutputHandler {
    format: Box<dyn AsciiArtOutputFormat>,
}

impl OutputHandler {
    pub fn new(format: Box<dyn AsciiArtOutputFormat>) -> Self {
        Self {format}
    }

    pub fn from_path(output_path: &str) -> Result<Self, Box<dyn Error>> {
        let format: Result<Box<dyn AsciiArtOutputFormat>, Box<dyn Error>> = match output_path.split('.').last() {
            Some("txt") => Ok(Box::new(TxtFormat)),
            Some(ext) => Err(format!("Unsupported file extension: {}", ext).into()),
            None => Err("No file extension provided".into()),
        };

        let format = format?;
        Ok(Self::new(format))
    }

    pub fn save_ascii_art_to_file(&self, ascii_art: &str, output_path: &str, ascii_config: &AsciiConfig) -> Result<(), Box<dyn Error>> {
        let mut file = File::create(output_path)?;
        self.format.write_to(&mut file, ascii_art, ascii_config)?;

        println!("ASCII Art saved to {}", output_path);
        Ok(())
    }
}
